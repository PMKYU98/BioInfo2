sInput1 = '''
PAWHEAE
HEAGAWGHEE
'''

sInput2= '''
CGTTCTAGAAGCAGAGGGCTGCAGGTTCTTGCTCTGCCATTCTTTTAAGATCATGCAGACATAACCAAGCCTCTAGGCGGATATTTACTAGTGCATCTGGGGCCCCCCCAAGCCGCGAGCAGAATACTACTGTGGTCTCAGGTAAAAGCGCCAGTCCTAGGGACAATTACTTTGTTTATAATTGGGTTCGTCTATCCTTAACATGAGGTGATATTTCTTGTGCGCAGATTCTGCACACCCAACGGTACGTCTCCAGTAGGCCACGAACCGCTCTGGGCGCCCCTGACTGCCCCTATAAGAATGACGCTCTTGACGGTAGCCTTGACAATTCGCATTGGTTCAGTCCGCCCTCGTCTAACGAGACCCCGTACGCCGGGAGCATATGCAGAGGAATGTCTGGCCAATATAGAATCATAGGCCGCCTGGTGGCATCATTATAAATCACCGGTGCCGGGTCTTAGCGACTTGAGGAGGGGGTATATTGACTCGTCACAGGGCTATCTGCTCCTGGTGATAATGTATACTTAAAGCAATTGAACACAATTAATCAATGGCTTAGTAGTAATTGAATAAGTAAATTACCTGGGCTCAATCGGCTCTCTGCAAACGATGTGGTAACTCCGCGTACGTGGCCGAACACCGGCCGAAAAGTCACTCACTTCCCCTCACGTTAGTAGGTACCGGTATCGAGATTATCGCACAGAGATGAGTCTGTACGAGAGATACTCCTGACCATCATTCTATAAGAGCACCAGGCATGAGCGGGCTCGCCCTATGATACCGCCTACGGACGGACCCGACAAATTTCTGGTACCCGAGCTAGCTTATTGAAACATCCGACTCAGAACCAGCAAGTATAGATTTTGTTTCACAACTGACCCCCAACCTAGTTAATGGTA
TCTTAGGTTCCGGTATTGTTGATTCGTCGCACAGAGGTGAGTCTTATAGAGATACTCTTCAACCATCATTCTTAAGGGCTCACCAGGCGGTTAGCAAGCTCGCCTATAATTACTGCCTCCGATGACCCGGGAAGCCTGGGACCGAGCCGTGGGTGTACTGTAAAAACACCCGACTCAGGACCAAATGTATAAGATTCAGGTCTTACAGATTAATCCCGAACCACCAAACGGTAATACCCATTAAGTTCTTATCTCTACCAGGACTGAGTTCCTGTGAGCAAGAGGTAATTCACTGTTCATGCGAGGAAGAATCCTCTCGGAACCTCTCGCACTACCAAGCGCGGCGCTGCCTCTTACGTCTGCAGGTCCTGATACTAACTTAGATGCGTGAGAATCCGATTCACAGAGAAGCTGTACCGTCGCAGGCCGAGGATCGTCATAATCCTATACCACCGAGTTTTCACAGACACTCAATAGCGTCTCTAGTCGGACGACCGTTAGACGATCATCGCACTAGAACCGGTTAGTATTCGCTGCGGCACGCTATCCGCTGCTGATGACCAAACCTCGCTCCATTGCTCAAGGACACCGAACAAAGTGCAGGTCTAGTAATCGGGCGTTCAACACGAGTCTAGTTGGGGAGCCCCTAATTTTTTATACCCTCTCACCCGATTTTATCGTTAATCATTCGGTGTCGACTTTGAGCCCCACTCGTCCCAATTTAGGCAGACGCACCCCGTTTTGCTTTGCATTGACTTAGTGATAATATAGTTCCTTACGTTGTATAAAATAGCCATTGCGAAACAGGCAAATCCGCCGAGTTGTATCGTGACCTAACGATAATTAAAACAACCTGTGTTGCAGGCTCGCAGCGTTATAAAGGCAATGTTTGTATCCTTTGCGCATCTGACGACTTCTCACAACTTGGGCTCGTGATAAGAATAG
'''


sInput = sInput1

match = 1
penalty = -2

def PRINT_MATRIX(matScore):
    for l in matScore:
        print('\t'.join([str(i) for i in l]))
    print('')

def CALCULATE(sV, sW, x, y, matScore):
    if x == 0:
        return matScore[y-1][x] + penalty
    if y == 0:
        return matScore[y][x-1] + penalty

    scoreDown = matScore[y-1][x] + penalty

    if x == len(sW):
        scoreRight = matScore[y][x-1] + penalty * 10
    else:
        scoreRight = matScore[y][x-1] + penalty

    if sV[y-1] == sW[x-1]:
        scoreDiagonal = matScore[y-1][x-1] + match
    else:
        scoreDiagonal = matScore[y-1][x-1] + penalty

    return max(scoreDown, scoreRight, scoreDiagonal)

def INITIALIZE(sV, sW, n, m):
    matScore = [[0] * (m+1) for i in range(n+1)]

    for x in range(1,m+1):
        matScore[0][x] = CALCULATE(sV, sW, x, 0, matScore)

    for y in range(1,n+1):
        matScore[y][0] = CALCULATE(sV, sW, 0, y, matScore)

    return matScore

def TOUR(sV, sW, n, m, matScore):
    for y in range(1, n+1):
        for x in range(1, m+1):
            matScore[y][x] = CALCULATE(sV, sW, x, y, matScore)

    return matScore

def BACKTRACK(n, m, sV, sW, matScore):
    i, j = n, m
    subseq1 = []
    subseq2 = []
    while(i >= 1 and j >= 1):
        if matScore[i][j] == matScore[i][j-1] + penalty:
            subseq1.append('-')
            subseq2.append(sW[j-1])
            j -= 1
        elif matScore[i][j] == matScore[i-1][j] + penalty: 
            subseq1.append(sV[i-1])
            subseq2.append('-')
            i -= 1
        else:
            subseq1.append(sV[i-1])
            subseq2.append(sW[j-1])
            i -= 1
            j -= 1

    substr1 = ''.join(reversed(subseq1))
    substr2 = ''.join(reversed(subseq2))

    return matScore[n][m], substr1, substr2

sW, sV = sInput.split('\n')[1:-1]
n, m = len(sV), len(sW)

matScore = INITIALIZE(sV, sW, n, m)
matScore = TOUR(sV, sW, n, m, matScore)
PRINT_MATRIX(matScore)

lastColumn = [row[-1] for row in matScore]

maxY = lastColumn.index(max(lastColumn))
_, new_sW, new_sV = BACKTRACK(maxY, m, sV, sW, matScore)

new_n, new_m = len(new_sV), len(new_sW)

matScore = INITIALIZE(new_sV, new_sW, new_n, new_m)
matScore = TOUR(new_sV, new_sW, new_n, new_m, matScore)
PRINT_MATRIX(matScore)
score, align1, align2 = BACKTRACK(new_n, new_m, new_sV, new_sW, matScore)

print(score)
print(align1)
print(align2)