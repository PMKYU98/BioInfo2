sInput= '''
ACTCCGCATAAGCAACACGCCCATATACGGCCAAAAGTACTCATTCCGGACGCATGGGCAGTCGTTGGCACCCAGACCAGCAAATTCGTTATCTCGAAATTGTCGCAACGCACCGACATATGACAATTAACCTCGTATGCTGTGTCTCTACTTGCTCAGTTATCTTTGGCACACGGTCTCAGCCCGATATGTCCAACTTCCAGGGTACGCTCACTATCTAGATTGACAGACTCCTACCGGTTAGCGATGATCATCTTTCATTTCCGGACACTGGATGATTGTGTTCAATTTGAGTAACTTACGCGCTGCAAGTGACGACGGTCATCGAAGCCAAACCTCACGCTTGAACAAGGTATGTTTAAATTACGTAGCGAGATTGTGAGAAGGATAACACGTCTATAACTAAAATCTACTTTGTCTTCGAATGGGCCTCAAGCGATGTGGGCATCGCCTCGGGTGCCTTGGCCCGGTCTGCGTTAGTTACACCCGATGTCCTCATTGCTCTTGTGGGTTGTAAACACCATACCCTGAGAGTAACTATCGTCTCAGGTACTACGCAAGTCCCAGAACTTTTGTGGCAGGCCCTCCCAAAGGGAGGGCAAGCCGTTGCGGTTTAACTAACAAACTCCCAGCCTCGCAATGACAAGCTAGGTTTGAATAGTTGAGGCATTCAAAGGGGCCCTTGAAGTTTGTAGTGCGGCGCAGGATACGGAACCACAGCATTAATAAAGCGCAATATGCAATCCCAGGTATCAGCTTTTGACTCATTGCCTCGGGCTAATTGAATCCACAGCCCATGGGGATTATCCAACGTGCCGACCTGGCATTGCGGCTGCAGCCCGTTCCTGAAGCTACTGTGTAGGGCTACGCACTCCCAGCGTTCACGTAATGGGGCTGAGTCAGCTCTAGCACCATTCA
GGTGTGAAGATAGCTGCGGAATGGGTGGTATCGTTTCTTTATGCAGCCACAGTCAGCGGTAAACGTTATGCGCAGCCGCGAACAGGGCCGCACATAGAAGCAGAATCATAGAGTCTCCTTCGTGAAGGAACTTGCCGTAGAGGGGAACGGTAACCAGTTTAATTCGCTGGCCTTTCAGGTCATTGTGTATAACCCGGCGTACGGCGAAATCCCAACTCCGCTCTATCCGGTCAAGGCATTCGTGCCGAACAGCGCTGTGTGAGCGTGAGTTCTACTGAAGTAATAGCGGTGTGCTACAATTTGGGACCTTTTCTTGATTTGTCGGATACCGCATTCAGTTTAGACGTTGACGCACCTTTGGCCGGCATGATGCGAACCACGCTTGAATCATCGATAAGGAACGTGATCCACGGTCTCGGAATGGTTTCCCTCGTACGGGTTAGGTAGAGCGGTGTAGTATATTGCTGTTCCTATAGGCCGCTAACCCTGTACTTTGGAGTGCCGTCCAGAATGTTGATCGAACCGCATACATACTGGGCACGTCGTGCGCAGTCGCGCGCCTCACGGCGCATCGGAATACTGTGCGGGAAATACCCTGACTTTTCGAACATTGAATGGGGTACCATACTTCCTCGATTCCCGCATTTCCTTTACGGCACTGTAAAGCAAGGAACATACCAGTCCTCTTGTCAAAGGGAACAATATAGGTAGTTAGGTTCGGTCGCCTTGTCTATTAAGATAGACTAGCGTACTTTCATGAGTGCATTATGCAATTGCGGTCAATCTCGGGATGCCCTGGTAGCACAAGATGCGTCTGCCTTTCTTGTTAGGGTACTTGTAGTGGTATCAAGTGACAGTCCCATAAAATTCCTTTCACGTGGCTTTGAAAGCGTAAAGCCGACGAAAACAACAATTCAGCACGGCTCTCGTACTATCCGGAGTTCACCTGAAACCAGGTTTAAGCAGC
'''

def PRINT_MATRIX(matScore):
    for l in matScore:
        print('\t'.join([str(i) for i in l]))

def INITIALIZE(n, m):
    return [[0] * (m+1) for i in range(n+1)]

def CALCULATE(y, x, sV, sW, matScore):
    if sV[y-1] == sW[x-1]:  scoreMatch = matScore[y-1][x-1] + 1
    else: scoreMatch = -1

    return max(matScore[y-1][x], scoreMatch, matScore[y][x-1])

def TOUR(n, m, sV, sW, matScore):
    for y in range(1, n+1):
        for x in range(1, m+1):
            matScore[y][x] = CALCULATE(y, x, sV, sW, matScore)

    return matScore

def BACKTRACK(n, m, sV, sW, matScore):
    i, j = n, m
    subseq = []
    while(i >= 1 and j >= 1):
        if matScore[i][j] == matScore[i][j-1]: j -= 1
        elif matScore[i][j] == matScore[i-1][j]: i -= 1
        else:
            subseq.append(sV[i-1])
            i -= 1
            j -= 1

    return ''.join(reversed(subseq))

sV, sW = sInput.split('\n')[1:-1]
n, m = len(sV), len(sW)

matScore = INITIALIZE(n, m)
matScore = TOUR(n, m, sV, sW, matScore)
print(BACKTRACK(n, m, sV, sW, matScore))
